import java.util.Arrays;
import java.util.Scanner;

public class RowColumnarCipher {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.print("Enter the plain text: ");
        String text = scanner.nextLine().replaceAll("\\s+", "").toUpperCase();

        System.out.print("Enter the key (word): ");
        String key = scanner.nextLine().toUpperCase();

        // Encrypt
        String encrypted = encrypt(text, key);
        System.out.println("Encrypted Text: " + encrypted);

        // Decrypt
        String decrypted = decrypt(encrypted, key);
        System.out.println("Decrypted Text: " + decrypted);

        scanner.close();
    }

    // Encrypt function
    public static String encrypt(String text, String key) {
        int cols = key.length();
        int rows = (int) Math.ceil((double) text.length() / cols);

        char[][] grid = new char[rows][cols];
        int k = 0;

        // Fill the grid row-wise
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (k < text.length()) {
                    grid[i][j] = text.charAt(k++);
                } else {
                    grid[i][j] = 'X'; // Padding
                }
            }
        }

        // Sort the key
        char[] sortedKey = key.toCharArray();
        Arrays.sort(sortedKey);

        StringBuilder cipher = new StringBuilder();

        // Read columns based on sorted key
        for (char ch : sortedKey) {
            int col = key.indexOf(ch);
            for (int row = 0; row < rows; row++) {
                cipher.append(grid[row][col]);
            }
            key = key.substring(0, col) + "*" + key.substring(col + 1); // mark used
        }

        return cipher.toString();
    }

    // Decrypt function
    public static String decrypt(String cipher, String key) {
        int cols = key.length();
        int rows = (int) Math.ceil((double) cipher.length() / cols);

        char[][] grid = new char[rows][cols];
        char[] sortedKey = key.toCharArray();
        Arrays.sort(sortedKey);

        int k = 0;
        char[] tempKey = key.toCharArray();

        // Fill the grid column-wise
        for (char ch : sortedKey) {
            int col = indexOf(tempKey, ch);
            for (int row = 0; row < rows; row++) {
                if (k < cipher.length()) {
                    grid[row][col] = cipher.charAt(k++);
                }
            }
            tempKey[col] = '*'; // mark used
        }

        // Read row-wise
        StringBuilder plain = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                plain.append(grid[i][j]);
            }
        }

        return plain.toString();
    }

    // Helper function to find index
    public static int indexOf(char[] arr, char ch) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == ch) return i;
        }
        return -1;
    }
}
