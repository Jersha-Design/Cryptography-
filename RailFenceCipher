import java.util.Scanner;

public class RailFenceCipher {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.print("Enter the plain text: ");
        String text = scanner.nextLine().replaceAll("\\s+", "").toUpperCase();

        System.out.print("Enter the number of rails: ");
        int rails = scanner.nextInt();

        // Encrypt
        String encrypted = encryptRailFence(text, rails);
        System.out.println("Encrypted Text: " + encrypted);

        // Decrypt
        String decrypted = decryptRailFence(encrypted, rails);
        System.out.println("Decrypted Text: " + decrypted);

        scanner.close();
    }

    // Encrypt function
    public static String encryptRailFence(String text, int rails) {
        if (rails == 1) return text;

        StringBuilder[] rail = new StringBuilder[rails];
        for (int i = 0; i < rails; i++) {
            rail[i] = new StringBuilder();
        }

        int dir = 1; // 1 for down, -1 for up
        int row = 0;

        for (char c : text.toCharArray()) {
            rail[row].append(c);
            row += dir;

            if (row == 0 || row == rails - 1) {
                dir *= -1; // Change direction
            }
        }

        StringBuilder result = new StringBuilder();
        for (StringBuilder r : rail) {
            result.append(r);
        }

        return result.toString();
    }

    // Decrypt function
    public static String decryptRailFence(String cipher, int rails) {
        if (rails == 1) return cipher;

        boolean[][] marker = new boolean[rails][cipher.length()];

        int dir = 1;
        int row = 0;

        // Mark the places
        for (int i = 0; i < cipher.length(); i++) {
            marker[row][i] = true;
            row += dir;

            if (row == 0 || row == rails - 1) {
                dir *= -1;
            }
        }

        // Fill the letters
        char[][] rail = new char[rails][cipher.length()];
        int index = 0;
        for (int i = 0; i < rails; i++) {
            for (int j = 0; j < cipher.length(); j++) {
                if (marker[i][j] && index < cipher.length()) {
                    rail[i][j] = cipher.charAt(index++);
                }
            }
        }

        // Read the message
        StringBuilder result = new StringBuilder();
        row = 0;
        dir = 1;
        for (int i = 0; i < cipher.length(); i++) {
            result.append(rail[row][i]);
            row += dir;

            if (row == 0 || row == rails - 1) {
                dir *= -1;
            }
        }

        return result.toString();
    }
}
